import React, { useEffect, useState } from "react";
import { useDispatch, useSelector } from "react-redux";
import { Modal, Button, Form, Alert } from "react-bootstrap";
import {
  fetchChatData,
  addMessage,
  addChannel,
  removeChannel,
  renameChannel,
} from "../redux/chatSlice";
import io from "socket.io-client";
import "../styles/Chat.css";

const createSocket = () => io("http://localhost:3000");

const Chat = () => {
  const dispatch = useDispatch();
  const { channels, messages, loading, error } = useSelector(
    (state) => state.chat
  );
  const [selectedChannel, setSelectedChannel] = useState(null);
  const [messageText, setMessageText] = useState("");
  const [newChannelName, setNewChannelName] = useState("");
  const [showModalDeleteChannel, setShowModalDeleteChannel] = useState(false);
  const [warning, setWarning] = useState("");
  const [warningMessage, setWarningMessage] = useState("");
  const [showModalAddChannel, setShowModalAddChannel] = useState(false);
  const [showModalRenameChannel, setShowModalRenameChannel] = useState(false);

  useEffect(() => {
    // –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Å —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Å —á–∞—Ç–æ–º
    const token = localStorage.getItem("token");

    if (token) {
      dispatch(fetchChatData(token));
    }

    // –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É —Å–æ–∫–µ—Ç–æ–≤
    const socket = createSocket();

    // –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ —Å–æ–±—ã—Ç–∏–µ –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    socket.on("newMessage", (payload) => {
      dispatch(addMessage(payload)); // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Redux store
    });

    socket.on("newChannel", (payload) => {
      dispatch(addChannel(payload)); // Update the Redux store with the new channel
      setSelectedChannel(payload.id);
    });

    // Listen for "removeChannel" event
    socket.on("removeChannel", (payload) => {
      dispatch(removeChannel(payload));
    });

    socket.on("renameChannel", (payload) => {
      dispatch(renameChannel(payload)); // Rename the channel in the Redux store
    });

    // –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –ø—Ä–∏ —Ä–∞–∑–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
    return () => {
      socket.disconnect();
    };
  }, [dispatch]);

  if (loading) {
    return (
      <div
        className="d-flex justify-content-center align-items-center"
        style={{ height: "100vh" }}
      >
        <div className="spinner-border text-dark" role="status">
          <span className="visually-hidden">Loading...</span>
        </div>
      </div>
    );
  }

  if (error) {
    return (
      <div
        className="d-flex justify-content-center align-items-center"
        style={{ height: "100vh" }}
      >
        <div className="alert alert-danger" role="alert">
          Error: {error}
        </div>
      </div>
    );
  }

  const handleChannelClick = (channelId) => {
    setSelectedChannel(channelId);
  };

  const handleSendMessage = (e) => {
    e.preventDefault();

    if (!selectedChannel) {
      setWarningMessage("–ù–∞–¥–æ –≤—ã–±—Ä–∞—Ç—å –∫–∞–Ω–∞–ª üò©")
      return;
    }

    if (!messageText.trim()) {
      setWarningMessage("–ü–æ–ª–µ –¥–ª—è –≤–≤–æ–¥–∞ –ø—É—Å—Ç–æ–µ ü§ï")
      return;
    }

    const newMessage = {
      body: messageText,
      channelId: selectedChannel,
      username: "admin", // –í–∞–º –º–æ–∂–µ—Ç –ø–æ–Ω–∞–¥–æ–±–∏—Ç—å—Å—è —É–∫–∞–∑–∞—Ç—å –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∑–¥–µ—Å—å
    };

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ —Å–µ—Ä–≤–µ—Ä —á–µ—Ä–µ–∑ —Å–æ–∫–µ—Ç
    const socket = createSocket();
    socket.emit("newMessage", newMessage);
    // –û—á–∏—â–∞–µ–º –ø–æ–ª–µ –≤–≤–æ–¥–∞ –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏
    document.querySelector(".send-mess-input").value = "";
    setWarningMessage("")
  };

  const handleCloseModalAddChannel = () => {
    setShowModalAddChannel(false);
  };

  const handleShowModalAddChannel = () => {
    setShowModalAddChannel(true);
  };

  const handleCloseModalRenameChannel = () => {
    setShowModalRenameChannel(false);
  };

  const handleShowModalRenameChannel = () => {
    setShowModalRenameChannel(true);
  };

  const handleCancelDelete = () => {
    setShowModalDeleteChannel(false);
  };

  const handleDeleteChannel = () => {
    setShowModalDeleteChannel(true);
  };

  const handleAddChannel = (e) => {
    e.preventDefault();
    const socket = createSocket();
    const names = channels.map(chan => chan.name);

    if (!newChannelName.trim()) {
      setWarning("–ò–º—è –∫–∞–Ω–∞–ª–∞ –Ω–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø—É—Å—Ç—ã–º üòè");
      return;
    }

    if (names.includes(newChannelName)) {
      setWarning("–ö–∞–Ω–∞–ª —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç ü§¶‚Äç‚ôÇÔ∏è");
      return;
    }

    const newChannel = {
      id: channels.length + 1, // Assuming unique channel IDs, you can change this accordingly
      name: newChannelName.trim(),
      creator: "admin", // Replace this with the actual creator's name or user ID
      removable: true, // Assuming the creator can remove this channel, set to false if not
    };

    socket.emit("newChannel", newChannel);

    // Move the creator to the newly added channel
    setSelectedChannel(newChannel.id);

    setWarning("");
    setNewChannelName("");
    handleCloseModalAddChannel();
  };

  const handleConfirmDelete = (e) => {
    e.preventDefault();
    const socket = createSocket();
    // Perform the channel deletion logic here

    if (selectedChannel !== 1 && selectedChannel !== 2) {
      socket.emit("removeChannel", {
        id: selectedChannel,
        name: newChannelName.trim(),
      });
      setSelectedChannel(null);
      setShowModalDeleteChannel(false);
      setWarning("");
      dispatch(removeChannel(selectedChannel));
    } else {
      setWarning("–ù–µ–ª—å–∑—è —É–¥–∞–ª—è—Ç—å —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –∫–∞–Ω–∞–ª—ã üò≠")
    }
  };

  const handleRenameChannel = (e) => {
    e.preventDefault();
    const socket = createSocket();
    const names = channels.map(chan => chan.name);

    if (!newChannelName.trim()) {
      setWarning("–ò–º—è –∫–∞–Ω–∞–ª–∞ –Ω–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø—É—Å—Ç—ã–º üòè");
      return;
    }

    if (selectedChannel === 1 || selectedChannel === 2) {
      setWarning("–≠—Ç–æ–º—É –∫–∞–Ω–∞–ª—É –Ω–µ–ª—å–∑—è –ø–æ–º–µ–Ω—è—Ç—å –∏–º—è üòí");
      return;
    }

    if (names.includes(newChannelName)) {
      setWarning("–ö–∞–Ω–∞–ª —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç ü§¶‚Äç‚ôÄÔ∏è");
      return;
    }

    socket.emit("renameChannel", {id: selectedChannel, name: newChannelName.trim()});

    setNewChannelName("");
    handleCloseModalRenameChannel();
    setWarning("");
    dispatch(renameChannel(selectedChannel, newChannelName.trim()));
  };

  return (
    <div className="container mt-4">
      <div className="row">
        {/* –°–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤ (–ª–µ–≤–∞—è —á–∞—Å—Ç—å) */}
        <div className="col-md-4">
          <h2>–°–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤</h2>
          <ul className="list-group">
            {channels.map((channel) => (
              <li
                key={channel.id}
                className={`list-group-item ${
                  selectedChannel === channel.id ? "active" : ""
                }`}
                onClick={() => handleChannelClick(channel.id)}
              >
                # {channel.name}
              </li>
            ))}
          </ul>
          <div>
            <Modal show={showModalDeleteChannel} onHide={handleCancelDelete}>
              <Modal.Header closeButton>
                <Modal.Title>–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è</Modal.Title>
              </Modal.Header>
              <Modal.Body>
                {warning && <Alert variant="warning">{warning}</Alert>}
                –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –∫–∞–Ω–∞–ª?
              </Modal.Body>
              <Modal.Footer>
                <Button variant="secondary" onClick={handleCancelDelete}>
                  –û—Ç–º–µ–Ω–∞
                </Button>
                  <Button autoFocus variant="danger" onClick={handleConfirmDelete}>
                    –£–¥–∞–ª–∏—Ç—å
                  </Button>
              </Modal.Footer>
            </Modal>
          </div>
          {/* –í—ã–ø–∞–¥–∞—é—â–µ–µ –º–µ–Ω—é —Å –∫–Ω–æ–ø–∫–∞–º–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–∞–Ω–∞–ª–æ–º */}
          <div className="dropdown mt-4">
            <button
              className="btn btn-secondary dropdown-toggle bg-success"
              type="button"
              id="channelActionsDropdown"
              data-bs-toggle="dropdown"
              aria-expanded="false"
            >
              –î–µ–π—Å—Ç–≤–∏—è
            </button>
            <ul
              className="dropdown-menu"
              aria-labelledby="channelActionsDropdown"
            >
              {/* –ö–Ω–æ–ø–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ –∫–∞–Ω–∞–ª–∞ */}
              <li>
                <Button
                  variant="link"
                  onClick={handleShowModalAddChannel}
                  className="dropdown-item"
                >
                  –î–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª
                </Button>
              </li>
              {/* –ö–Ω–æ–ø–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∫–∞–Ω–∞–ª–∞ */}
              {selectedChannel && (
                <li>
                  <Button
                    className="dropdown-item"
                    onClick={handleDeleteChannel}
                  >
                    –£–¥–∞–ª–∏—Ç—å –∫–∞–Ω–∞–ª
                  </Button>
                </li>
              )}
              {/* –ö–Ω–æ–ø–∫–∞ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è –∫–∞–Ω–∞–ª–∞ */}
              {selectedChannel && (
                <li>
                  <Button
                    className="dropdown-item"
                    onClick={handleShowModalRenameChannel}
                  >
                    –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞—Ç—å –∫–∞–Ω–∞–ª
                  </Button>
                </li>
              )}
            </ul>
          </div>

          {/* –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–∞–Ω–∞–ª–∞ */}
          <Modal
            show={showModalAddChannel}
            onHide={handleCloseModalAddChannel}
            aria-labelledby="addChannelModalLabel"
          >
            <Modal.Header closeButton>
              <Modal.Title id="addChannelModalLabel">
                –î–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª
              </Modal.Title>
            </Modal.Header>
            <Modal.Body>
              {warning && <Alert variant="warning">{warning}</Alert>}
              <Form onSubmit={handleAddChannel}>
                <Form.Group className="mb-3" controlId="newChannelName">
                  <Form.Label>–ò–º—è –∫–∞–Ω–∞–ª–∞</Form.Label>
                  <Form.Control
                    type="text"
                    value={newChannelName}
                    onChange={(e) => setNewChannelName(e.target.value)}
                  />
                </Form.Group>
                <Button variant="success" type="submit">
                  –î–æ–±–∞–≤–∏—Ç—å
                </Button>
              </Form>
            </Modal.Body>
          </Modal>

          {/* –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –¥–ª—è –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è –∫–∞–Ω–∞–ª–∞ */}
          <Modal
            show={showModalRenameChannel}
            onHide={handleCloseModalRenameChannel}
            aria-labelledby="renameChannelModalLabel"
          >
            <Modal.Header closeButton>
              <Modal.Title id="renameChannelModalLabel">
                –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞—Ç—å –∫–∞–Ω–∞–ª
              </Modal.Title>
            </Modal.Header>
            <Modal.Body>
              {warning && <Alert variant="warning">{warning}</Alert>}
              <Form onSubmit={handleRenameChannel}>
                <Form.Group className="mb-3" controlId="newChannelName">
                  <Form.Label>–ù–æ–≤–æ–µ –∏–º—è –∫–∞–Ω–∞–ª–∞</Form.Label>
                  <Form.Control
                    type="text"
                    value={newChannelName}
                    onChange={(e) => setNewChannelName(e.target.value)}
                  />
                </Form.Group>
                <Button variant="success" type="submit">
                  –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞—Ç—å
                </Button>
              </Form>
            </Modal.Body>
          </Modal>
        </div>

        {/* –ü–æ–∫–∞–∑ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –∫–∞–Ω–∞–ª–∞ */}
        <div className="col-md-8">
          <h2>
            {selectedChannel
              ? `–ö–∞–Ω–∞–ª: ${
                  channels.find((channel) => channel.id === selectedChannel)
                    ?.name
                }`
              : "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–Ω–∞–ª"}
          </h2>
          <hr />

          {/* –ß–∞—Ç –∏ —Ñ–æ—Ä–º–∞ –¥–ª—è –≤–≤–æ–¥–∞ –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è */}
          <div className="card">
          {warningMessage && <Alert variant="warning">{warningMessage}</Alert>}
            <div className="card-body message-list-container">
              {selectedChannel === null ? (
                <img
                  className="animal"
                  src="https://i.pinimg.com/564x/81/1f/1b/811f1b01539f81ed6eca7b83cf1710fc.jpg"
                  alt="animal"
                />
              ) : (
                <ul className="list-group message-list">
                  {/* Display only the last 'maxDisplayedMessages' messages */}
                  {messages
                    .filter(
                      (message) =>
                        selectedChannel === null ||
                        message.channelId === selectedChannel
                    )
                    .map((message) => (
                      <li key={message.id} className="list-group-item">
                        <span className="message-sender">
                          {message.username}:
                        </span>{" "}
                        {message.body}
                      </li>
                    ))}
                </ul>
              )}
            </div>
          </div>

          {/* –§–æ—Ä–º–∞ –¥–ª—è –≤–≤–æ–¥–∞ –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è */}
          <div className="mt-4">
            <form onSubmit={handleSendMessage}>
              <div className="input-group">
                <input
                  type="text"
                  className="form-control send-mess-input"
                  placeholder="–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"
                  onChange={(e) => setMessageText(e.target.value)}
                />
                <div className="input-group-append">
                  <button type="submit" className="btn btn-success">
                    –û—Ç–ø—Ä–∞–≤–∏—Ç—å
                  </button>
                </div>
              </div>
            </form>
          </div>
        </div>
      </div>
    </div>
  );
};

export default Chat;
